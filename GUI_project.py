"""
COMP.CS.100 Ohjelmointi 1 / Programming 1
Name    Muhammad Usman
Mail    muhammad.usman@tuni.fi
Student Number: 150162050

NUMBER GUESSING GAME PROJECT
"""
# Project Details
'''
IN THIS PROJECT A GUI IS DEVELOPED FROM SCRATCH AND SUBSTENTIAL AMOUNT OF TIME IS SPEND TO SEARCH AND IMPLEMENT 
MORE ADVANCED GUI COMPONENTS LIKE DROPDOWN MENUE,POP UPS, resizeable widgets, COUNTDOWN TIMER AND RESETING OF THE
COUNT DOWN TIMER. THOUGH THE MAIN FOCUS OF THIS PROJECT WAS TO LEARN GUI'S STILL THE CODE FOR THE PROJECT IS
DEVELOPED FROM SCRATCH AND A CLASS AND METHODS ARE USED TO DEVIDE THE CODE IN LOGICAL WAY.

CONSIDERING THE ABOVE MENTIONED THINGS I THINK THE GUI PROJECT IS ADVANCED REGARDING THE COURSE CONTENT INTENDED TO
SCORE 200 POINTS.


GAME RULES:
A random number is generated from 1 to 20 and the player is supposed to guess if the number
generated is even or odd and what is the actual number. On guessing the right even or add 2 points
are scored and on guessing the right numberr 5 points are scored which are displayed in the score panel in GUI. 
The goal is to score 10 points in givin time to win the game. The points are no deducted on gussing the number or
number polarity wrong. If 10 points are not scored the player loose the game.

PROGRAM WORKING:
The GUI window is resizeable and the widgets change their sizes accordingly.
As soon as the program is run a GUI will appear with a count down timer on the GUI.A random number is generated in the 
background. The program accepts the user input in two entry fields and process on the user entries to check if the
polarity and number is guessed right or wrong. depending on the success of guessing the points are allocated in the 
score panel. if user entered values are wrong a popup apperas giving the syntax error warning.

After entring the values the score can be checked by pressing the check button which also displays the original random
number generated by the program. if no values are entered a syntax error pop up appear with instruction on how to
enter the values in GUI entry fields. if the guesses are wrong no error or warnings are given and the entry fields are 
cleared up for new guess. if the user reach the 10 points withen the time a congratulating pop up appears and if the 
count down timer reaches zero before 10 points a loosing pop up appears and program quits.

There is also a drop down menu in the GUI with options from where the counter can be stopped, resumed also the game can 
reseted and rules for the game can be read.

'''


''' Importing the libraries used in the code '''

from tkinter import *
import random
from tkinter import ttk
from tkinter import messagebox


class Game:


    ''' This class contains the GUI widgets and important methods to implement
     the guessing game'''

    def __init__(self):


        '''Creating the Main Window'''

        self.__mainwindow = Tk(className='Python Tkinter Scoring Game')     #GUI window
        self.__mainwindow.geometry("1000x200")                              #window geometry
        self.__mainwindow.configure(bg="black")                             #window background


        '''instanciate/variables'''

        self.__options=['Resume', 'Stop', 'Reset', 'Rules']                  #dropdown menu options
        self.__score=0                                                        #points counting
        self.__hour = StringVar()                                             #variables to set the counter
        self.__minute = StringVar()
        self.__second = StringVar()
        self.__counter=90
        self.__after_id = None


        '''Lables and Entries (widgets that appear ont the GUI)
        The names are self discriptive'''

        self.__polarity_lable = Label(self.__mainwindow, text="Even or Odd", font=("Arial",18), fg="cyan", bg="green" )
        self.__polarity_value = Entry(self.__mainwindow, font=("Arial",18), fg="cyan", bg="green")
        #self.__polarity_value.insert(0,'Even/Odd: ')
        self.__num_lable = Label(self.__mainwindow, text="Number Value",font=("Arial",18), fg="cyan", bg="green")
        self.__num_value = Entry(self.__mainwindow, font=("Arial",18), fg="cyan", bg="green")
        #self.__num_value.insert(0,'Intiger: ')
        self.__score_lable = Label(self.__mainwindow, text="Score:", font=("Arial",18), fg="cyan", bg="green")
        self.__score_value = Label(self.__mainwindow, text="", font=("Arial",18), fg="cyan", bg="black")
        self.__rnum_lable = Label(self.__mainwindow, text="Number Generated:", font=("Arial",18), fg="cyan", bg="green")
        self.__rnum_value = Label(self.__mainwindow, text='', font=("Arial",18), fg="cyan", bg="black")
        self.__combo_lable =Label(self.__mainwindow, text="Options: ", font=("Arial",18), fg="cyan", bg="green")


        '''Buttons to check and exit'''

        self.__exit_button = Button(self.__mainwindow, text="Exit",  font=("Arial",18), fg="red", bg="yellow",
                                    activebackground="red", command=self.stop)
        self.__check_button = Button(self.__mainwindow, text="Check", font=("Arial", 18), fg="red", bg="yellow",
                                    activebackground="red", command=self.check)


        '''Dropdown Menu, a tkinter combobox is used to create a dropdown menue'''

        self.__style = ttk.Style()
        self.__style.theme_use('clam')
        self.__style.configure("TCombobox", fieldbackground="green", background="orange",arrowsize = 30)
        self.__Combo_box = ttk.Combobox(self.__mainwindow, value=self.__options, font=("Arial",18))
        self.__Combo_box.bind('<<ComboboxSelected>>',self.selected)
        self.__Combo_box.grid(row=0, column=1, sticky="nsew")


        '''Countdown'''

        self.__clock_lable= Label(self.__mainwindow, text="", font=("Arial",26), fg="cyan", bg="black")
        self.display_counter()     # Loops the clock method
        self.decrease_counter()     #updating the clock


        '''Arranging the buttons and windows using grid'''

        self.__clock_lable.grid(row=0, column=2, sticky="nsew")
        self.__polarity_lable.grid(row=2, column=0, sticky="nsew")
        self.__polarity_value.grid(row=2, column=1, sticky="nsew")
        self.__num_lable.grid(row=3, column=0, sticky="nsew")
        self.__num_value.grid(row=3, column=1, sticky="nsew")
        self.__score_lable.grid(row=1, column=4, sticky="nsew")
        self.__score_value.grid(row=1, column=5, sticky="nsew")
        self.__rnum_lable.grid(row=4, column=0, sticky="nsew")
        self.__rnum_value.grid(row=4, column=1, sticky="nsew")
        self.__exit_button.grid(row=4, column=4, sticky="nsew")
        self.__combo_lable.grid(row=0, column=0, sticky="nsew")
        self.__check_button.grid(row=4, column=2, sticky="nsew")


        '''Resizing the window and widgets
        All the widgets are closed in a list and a for loop is used to resize them with mainwindow resizing'''

        self.wg_list=[self.__clock_lable,self.__polarity_lable,self.__polarity_value,
                      self.__num_lable,self.__num_value,self.__score_lable,self.__score_value,
                      self.__rnum_lable,self.__rnum_lable,self.__exit_button]
        self.row_num=0
        self.clmn_num=0
        for wg in self.wg_list:
            Grid.rowconfigure(self.__mainwindow,self.row_num,weight=1)
            Grid.columnconfigure(self.__mainwindow, self.clmn_num, weight=1)
            self.row_num +=1
            self.clmn_num +=1


        self.__mainwindow.mainloop()



    '''DISPLAYING THE COUNTER AND PERFORMING THE OPERTIONS ON IT(STOP, RESUME,RESET) '''


    def display_counter(self):

        '''This method simply display the counter on the GUI'''

        self.__clock_lable['text'] = self.__counter


    def decrease_counter(self):

        '''This method count down the counter time and updates on it on the display
        when the counter reaches zero pop up the loosing message'''

        if self.__counter > 0:
            self.__counter -= 1
            self.display_counter()
            self.__after_id = self.__mainwindow.after(1000, self.decrease_counter)
        else:
            messagebox.showinfo('Lost', 'You lost !!!..\n\N{grinning face}')
            quit()


    def selected(self,event):

        '''The method performs the dropdown menue operations depending on the
        option selected'''

        if self.__Combo_box.get()=='Reset':
            self.__polarity_value.delete(0, 'end')
            self.__num_value.delete(0, 'end')
            self.__counter = 90
            self.display_counter()
        elif self.__Combo_box.get()=='Stop':
            if self.__after_id:
                self.__mainwindow.after_cancel(self.__after_id)
                self.__after_id = None
        elif self.__Combo_box.get()=='Resume':
            if not self.__after_id:
                self.decrease_counter()
        else:
            messagebox.showinfo('Game Rules', '\nGoal Score=10\nFill the Entries(1st:Even or '
                                              'Odd,2nd:Intiger Number from 1 to 20)\nPress check to get score\n'
                                              'score=5 if guessed corret Number\n score=2 if guesses even or odd '
                                              'correctly\nMax score in one check is 7\n'
                                              'time 100 Seconds')


    def check(self):

        '''This method generate the random number and check if the user guesses are right or wrong
        depending on the guesses counts the score and pop up winning message in case the user win'''

        n = random.randint(1, 20)
        try:
            evn_od= str(self.__polarity_value.get())
            inp_num = int(self.__num_value.get())
            if n%2 == 0 and evn_od == 'Even':
                self.__score= self.__score+2
                self.__score_value.configure(text=f'{self.__score}')
            elif n == inp_num:
                self.__score = self.__score+5
                self.__score_value.configure(text=f'{self.__score}')

            elif n%2 == 0 and evn_od == 'Odd':
                self.__score_value.configure(text=f'{self.__score}')
            elif n%2 != 0 and evn_od == 'Odd':
                self.__score= self.__score+2
                self.__score_value.configure(text=f'{self.__score}')
            elif n%2 != 0 and evn_od == 'Even':
                self.__score_value.configure(text=f'{self.__score}')
            elif n != inp_num:
                self.__score_value.configure(text=f'{self.__score}')

        except:
            messagebox.showinfo('Syntex Error', 'Sysntax Erro\nFill Both of the Entries\n1st:Even or Odd\n2nd:'
                                                'Intiger Number')
        self.__rnum_value.configure(text=f'{n}')
        if self.__score == 10:
            messagebox.showinfo('Win', 'You Win\n\N{CLAPPING HANDS SIGN}')
            quit()
        else:
            self.__polarity_value.delete(0, 'end')
            self.__num_value.delete(0, 'end')


    def stop(self):

        '''This method distroy the main window when pressed the exit button'''

        self.__mainwindow.destroy()


    def start(self):
        """
        Starts the mainloop.
        """
        self.__mainwindow.mainloop()



def main():

    '''Starts the program'''

    gui=Game()
    gui.start()

if __name__ == "__main__":
    main()
